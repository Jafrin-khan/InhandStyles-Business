{"version":3,"file":"static/js/196.46c5f538.chunk.js","mappings":"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","sources":["components/Login/Login.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Navbar from '../Shared/Navbar/Navbar';\nimport { useForm } from \"react-hook-form\";\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport googleImage from '../../images/google.png';\nimport useAuth from '../../hooks/useAuth';\nimport Swal from 'sweetalert2';\n\nconst Login = () => {\n\n    let navigate = useNavigate();\n    let location = useLocation();\n    let from = location.state?.from?.pathname ||  \"/products\" ;\n    const { auth, signInWithEmailAndPassword, user, setUser, error, google } = useAuth();\n    \n    // useEffect(()=>{\n        user.email && navigate(from , { replace:true })\n        // eslint-disable-next-line\n    // },[])\n\n    const [loginError, setLoginError] = useState('');\n\n    const { register, handleSubmit, formState: { errors } } = useForm();\n    const onSubmit = data => processLogin(data.email, data.password);\n\n    const processLogin = (email, password) => {\n        signInWithEmailAndPassword(auth, email, password)\n            .then(result => {\n                setUser(result.user);\n                // localStorage.setItem()\n                navigate(from, { replace: true })\n                setLoginError('');\n            })\n            .catch(error => {\n                swalAlert(error.message);\n            });\n    }\n\n    const swalAlert = (error) => {\n        if(error === 'Firebase: Error (auth/user-not-found).'){\n            Swal.fire({\n                icon: 'error',\n                title: 'User not found',\n                text: 'This user does not exist.',\n            })\n        }\n        if(error === 'Firebase: Error (auth/wrong-password).'){\n            Swal.fire({\n                icon: 'error',\n                title: 'Wrong password',\n                text: 'The password you entered is incorrect.',\n            })\n        }\n        if(error === 'Firebase: Error (auth/invalid-email).'){\n            Swal.fire({\n                icon: 'error',\n                title: 'Invalid email',\n                text: 'The email you entered is invalid.',\n            })\n        }\n        if(error === 'Firebase: Error (auth/user-disabled).'){\n            Swal.fire({\n                icon: 'error',\n                title: 'User disabled',\n                text: 'This user has been disabled.',\n            })\n        }\n        if(error === 'Firebase: Error (auth/account-exists-with-different-credential).'){\n            Swal.fire({\n                icon: 'error',\n                title: 'Account exists',\n                text: 'An account with this email already exists.',\n            })\n        }\n    }\n\n    error && swalAlert(error);\n\n    return (\n        <section style={{ backgroundColor: '#FDF5E6' }} className='bg-brand bg-brand-container'>\n            <Navbar />\n            <div className=\"container\">\n                <h1 className='fs-4 mt-5 text-center'>Sign In</h1>\n\n                <form onSubmit={handleSubmit(onSubmit)}>\n                    <div className=\"col-md-6 col-sm-8 mx-auto d-block\">\n\n                        <div className=\"form-group mt-2\">\n                            <label htmlFor='email' className='p-1'>Email</label>\n                            <input type='text' className=\"form-control p-2\" {...register(\"email\", { required: true })} />\n                            {errors.email && <span className='text-danger'>This field is required</span>}\n                        </div>\n\n                        <div className=\"form-group mt-2\">\n                            <label htmlFor='password' className='p-1'>Password</label>\n                            <input type='password' className=\"form-control p-2\"{...register(\"password\", { required: true })} />\n                            {errors.password && <span className='text-danger'>This field is required</span>}\n                        </div>\n\n                        <p><small className=\"form-text text-muted\">We'll never share your information with anyone else.</small></p>\n                        <p className='text-danger fw-bold'>{loginError.slice(10,37)}</p>\n                        \n                        <div className=\"mt-3\">\n                            <Link to='/reset-password' className='text-black text-decoration-none'>Can't Remember your password? <span className='text-primary text-decoration-underline'>Click here</span></Link>\n                        </div>\n\n                        <input type=\"submit\" className=\"btn btn-dark p-2 mt-2\" value=\"Log In\" />\n                      \n                        <div className=\"mt-3\">\n                            <Link to='/register' className='text-black text-decoration-none'>Don't have an Account? <span className='text-primary text-decoration-underline'>Register as a new user</span></Link>\n                        </div>\n                    </div>\n\n                </form>\n\n                <div className=\"d-flex justify-content-center align-items-center mt-3\">\n                    <div className=\"col-sm-2\"><hr /></div>\n                    <p className=\"text-center mt-3 px-3\">Or Sign in Using</p>\n                    <div className=\"col-sm-2\"><hr /></div>\n                </div>\n                \n                <div className=\"d-flex justify-content-center align-items-center p-2\">\n                    <button onClick={google} style={{minHeight:'60px'}} className='btn d-flex justify-content-center align-items-center mt-2'>\n                        <img src={googleImage} className='img-fluid mx-auto d-block' width={50} alt=\"Sign in Using Google\" />Google</button>{/* <p className='mt-2 ms-1'>Google</p> */}\n                </div>\n            </div>\n        </section>\n    );\n};\n\nexport default Login;"],"names":["navigate","useNavigate","from","useLocation","state","pathname","useAuth","auth","signInWithEmailAndPassword","user","setUser","error","google","email","replace","useState","loginError","setLoginError","useForm","register","handleSubmit","errors","formState","processLogin","password","then","result","catch","swalAlert","message","Swal","icon","title","text","style","backgroundColor","className","Navbar","onSubmit","data","htmlFor","type","required","slice","to","value","onClick","minHeight","src","width","alt"],"sourceRoot":""}